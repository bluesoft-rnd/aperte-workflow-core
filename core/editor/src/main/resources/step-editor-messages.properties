process.editor.title=Process Editor
process.editor.save=Save
process.editor.process.permissions=Process permissions
process.editor.process.definition=Process definition
process.editor.messages=Process messages
process.editor.dictionary=Dictionary
process.editor.queues=Process queues
process.editor.other=Other
permission.editor.assigned.roles=Already assigned roles
permission.editor.new.privilege=New privilege name
process.permission.RUN=Run the process instance
process.permission.SEARCH=Search the process instance
process.permission.INCLUDE=Include the process instance
permission.editor.description=Select role name from the list of available ones or type in your own expression. \
  Click on X next to already selected role name to remove it. \
  Selecting role .* will mean that the permission is available to all users who can access the process.
process.logo.reset=Use default
process.logo.description=Associate your custom logo image with this process definition to make it instantly \
  recognizable. Please do note, that the image must be less then {0} in size.
queue.editor.description=Define task queues associated with this process. Create new queue definition by providing \
  its name and pressing the add button. Remember that description serves as displayable text for the queue and \
  browsing permissions for groups can be used to create either blacklist or whitelist strategy.\
  Select role name from the list of available ones or type in your own expression. \
  Click on X next to already selected role name to remove it.
queue.editor.add=Add new queue
queue.editor.name.prompt=Insert queue name
queue.editor.description.prompt=Insert queue description
queue.new.no.name=No queue name given
queue.editor.assigned.roles=Already assigned roles
messages.language.description=Click the button below to add new language. Use the text area asociated with each \
  language to edit the messages. Respect the .properties file format, use key-value \
  pairs, e.g. name\=John.
 messages.dictionary.description =Use text field to save dictionary as dictionary.xml in bundle.
  
messages.language.new.caption=New language for process messages
messages.language.new.add=Add
messages.language.new.exists=This language is already defined
messages.language.new.button=Add new language
messages.language.delete.warning=You are about to delete all the messages associated with {0} language. Continue?
messages.language.delete.no=No
messages.language.delete.yes=Yes

application.title=Step Editor
application.select.step.type=Change step type

button.save=Save
button.close=Close

field.name=Step Name
field.assignee=Assignee
field.assignee.info=Assignee field value will be used to directly assign user to a task.<br/> \
  You can use expression language depending on your BPM implementation (e.g. <i>#{ }</i> syntax for jBPMv4).
field.candidateGroups=Candidate groups
field.candidateGroups.info=Task queue organizes tasks into inboxes available to priviledged users.<br/>\
   You can use expression language depending on your BPM implementation  (e.g. <i>#{ }</i> for jBPMv4).
field.swimlane=Swimlane
field.swimlane.info=Swimlanes work similiar to queues, with that one difference, that once task is \
  claimed by a particular user, further references to this swimlane for a current process will \
  automatically assign the task to a user from a swimlane.\n \
  You can use expression language depending on your BPM implementation (e.g. <i>#{ }</i> for jBPMv4).
field.description=Description
field.description.info=Description serves as noticeable step title, displayed above \
  widget definitions.
field.commentary=Commentary
field.commentary.info=Commentary is an optional text, usually longer than the description, that can be used \
  to provide help or warning information in particular step.

availableTree.header.name=Name
availableTree.header.description=Description
availableTree.name.default=name missing
availableTree.description.default=description missing
availableTree.description.prompt=Select an element to see it's description
availableTree.title=Available widgets
availableTree.group.description=Group {0}

stepTree.contains.invalid=Invalid data in widgets definition

stepTree.root.description=Root node of the step
stepTree.root.name=Step
stepTree.action.delete=Remove
stepTree.name.default=name missing
stepTree.title=Step structure
stepTree.no.parameters.defined=No parameters
stepTree.hint=Drag and drop items from the available widgets palette

form.parameters=Configurable parameters of element
form.no.parameters.defined=No parameters or permissions to configure
form.permissions=Permissions
form.permissions.roles=Roles
form.properties=Attributes
form.cancel=Cancel
form.confirm=Confirm
form.delete=Remove from tree

dialog.delete.title=Confirm removal
dialog.delete.question=Are you absolutely sure that you want to definitely remove the element and all it's subelements?
dialog.delete.cancel=Cancel
dialog.delete.confirm=Remove

dialog.close.title=Confirm closure
dialog.close.question=If you close the window you will lose all the changes you made in the editor. Do you want to save changes?
dialog.close.cancel=Close without saving
dialog.close.confirm=Save and close

error.config_not_loaded.title=We couldn't load you configuration
error.config_not_loaded.widget_not_found.body=We couldn't find widget "{0}" in configuration of this instance of Aperte Workflow.
error.config_not_loaded.unexpected_error.body=Unexpected error while trying to read saved configuration.

icon.widget.default=/icons/widget.png
icon.root.default=/icons/root.gif
icon.bundle.default=/icons/bundle.gif

userStep.noStepName=no step name
userStep.stepName={0}

jse.noStepName=no step name
jse.stepName={0}
jse.stepdef.notfound=Automatic step definition was not found
jse.params.notfound=No editable parameters found for automatic step definition {0}
jse.definition={0}
jse.button.save=Save
jse.button.close=Close
jse.title=<h1>{0}</h1><p>{1}</p>
jse.application.title=Java Step Editor
jse.error.read=Error reading step data.
jse.error.write=Error writing step data.
jse.required=Field {0} is required.

jse.instructions=The automated step requires no input from a user, executing the step logic based on process variables.\
  You can configure step settings (if any) by entering them in the form below and pressing <b>Save</b> button.<br/>\
  To save data, you can also press Ctrl-S keyboard shortcut. Saving data will close this window.

userstep.editor.instructions=This form allows for configuration of user interface and permissions for the human task.

userstep.editor.widgets.instructions=To add a widget to a hierarchy, please drag it from a list below \
  and place it on a widget hierarchy where applicable. To remove it - drag it back to the list.<br/>\
  Please note, that some widgets (marked in blue), can contain other widgets. Widgets marked in green do not have \
  such capabilities, but often provide interation with a process data.
userstep.editor.widgets.tabcaption=User Interface Definition
userstep.editor.permissions.tabcaption=Permissions
userstep.editor.assignment.tabcaption=Assignment
userstep.state.tabcaption=State Definition

editor.permissions.description.step.SEARCH=Users with this permission will be able to find process instances in this \
  step regardless of the process assignment or history.
roles.all=All roles

process.definition.comment=Commentary
process.definition.comment.info=Commentary allows to provide user with additional information about the process
process.definition.taskItemClass=Attribute taskItemClass
process.definition.description=Description
process.definition.description.info=Description is going to be used when displaying the process information to the user

property.field.description.short.format=<i>(attribute id: {1})</i>
property.field.description.format={0}<br/><i>(attribute id: {1})</i>

widget.attribute.caption.humanName=Caption
widget.attribute.description.humanName=Description
widget.attribute.comment.humanName=Commentary

widget.permission.desc.EDIT=Permission for EDIT mode
widget.permission.desc.VIEW=Permission for VIEW mode
